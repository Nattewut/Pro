import stripe
import qrcode
from django.http import JsonResponse, HttpResponse, HttpResponseBadRequest
from django.shortcuts import render
import json
import datetime
from io import BytesIO
import requests
from django.conf import settings
from .models import Product, Order, OrderItem
from .utils import cartData

stripe.api_key = settings.STRIPE_SECRET_KEY


def store(request):
    data = cartData(request)
    cartItems = data['cartItems']
    order = data['order']
    items = data['items']
    products = Product.objects.all()
    context = {'products': products, 'cartItems': cartItems}
    return render(request, 'store/store.html', context)


def cart(request):
    data = cartData(request)
    cartItems = data['cartItems']
    order = data['order']
    items = data['items']
    total_price = sum(item['product']['price'] * item['quantity'] for item in items)

    context = {
        'items': items,
        'order': order,
        'cartItems': cartItems,
        'total_price': total_price
    }
    return render(request, 'store/cart.html', context)


def checkout(request):
    data = cartData(request)
    cartItems = data['cartItems']
    order = data['order']
    items = data['items']
    total_price = sum(item['product']['price'] * item['quantity'] for item in items)

    context = {
        'items': items,
        'order': order,
        'cartItems': cartItems,
        'total_price': total_price
    }
    return render(request, 'store/checkout.html', context)


import json
import stripe
from django.http import JsonResponse, HttpResponseBadRequest

# ‡πÉ‡∏ä‡πâ API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
stripe.api_key = "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"

def create_checkout_session(request):
    if request.method != "POST":
        return HttpResponseBadRequest("Invalid request method. Please use POST.")

    try:
        data = json.loads(request.body)
        print("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend:", data)

        total_amount = int(float(data.get("total_amount", 0)) * 100)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå
        print(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {total_amount} ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PaymentIntent
        payment_intent = stripe.PaymentIntent.create(
            amount=total_amount,
            currency="thb",
            payment_method_types=["promptpay"],
            automatic_payment_methods={"enabled": True},  # ‚úÖ ‡πÉ‡∏´‡πâ Stripe ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Payment Methods ‡πÄ‡∏≠‡∏á
            confirm=True  # ‚úÖ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        )
        print("‚úÖ PaymentIntent ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", payment_intent)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ next_action
        if payment_intent.next_action is not None and "promptpay_display_qr_code" in payment_intent.next_action:
            promptpay_qr_code = payment_intent.next_action["promptpay_display_qr_code"]["image_url"]
            print("‚úÖ QR Code URL:", promptpay_qr_code)
            return JsonResponse({"qr_code_url": promptpay_qr_code}, status=200)
        else:
            print("‚ùå Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á QR Code ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤")
            return JsonResponse({"error": "Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á QR Code ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"}, status=400)

    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", str(e))
        return JsonResponse({'error': str(e)}, status=400)

def updateItem(request):
    data = json.loads(request.body)
    productId = data['productId']
    action = data['action']
    customer = request.user.customer
    product = Product.objects.get(id=productId)
    order, created = Order.objects.get_or_create(customer=customer, complete=False)

    orderItem, created = OrderItem.objects.get_or_create(order=order, product=product)
    if action == 'add':
        orderItem.quantity += 1
    elif action == 'remove':
        orderItem.quantity -= 1

    orderItem.save()
    if orderItem.quantity <= 0:
        orderItem.delete()

    return JsonResponse('Item was added/removed', safe=False)


def processOrder(request):
    transaction_id = datetime.datetime.now().timestamp()
    data = json.loads(request.body)
    total = float(data['form']['total'])

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ order ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
    order, created = Order.objects.get_or_create(transaction_id=transaction_id)

    order.transaction_id = transaction_id
    order.save()

    # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Raspberry Pi ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if order.shipping:
        for item in order.orderitem_set.all():
            product = item.product
            motor_id = product.motor_id  # ‡πÄ‡∏≠‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Raspberry Pi
            response = requests.post("http://raspberry_pi_ip_address/control_motor", json={"motor_id": motor_id})

            if response.status_code == 200:
                print(f"‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå {motor_id} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product.name}")
            else:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product.name}")

    return JsonResponse('Payment submitted..', safe=False)


def success(request):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ AJAX request (API) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å Browser ‡∏õ‡∏Å‡∏ï‡∏¥
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':  
        return JsonResponse({"message": "Payment successful"}, status=200)
    return render(request, 'store/success.html')

def cancel(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({"message": "Payment cancelled"}, status=200)
    return render(request, 'store/cancel.html')



import json
import stripe
import qrcode
import datetime
import requests
from io import BytesIO
from django.conf import settings
from django.http import JsonResponse, HttpResponseBadRequest
from django.shortcuts import render
from .models import Product, Order, OrderItem
from .utils import cartData

# ‚úÖ ‡πÉ‡∏ä‡πâ API Key ‡∏à‡∏≤‡∏Å settings.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
stripe.api_key = settings.STRIPE_SECRET_KEY


# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def store(request):
    data = cartData(request)
    context = {
        'products': Product.objects.all(),
        'cartItems': data['cartItems']
    }
    return render(request, 'store/store.html', context)


# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
def cart(request):
    data = cartData(request)
    context = {
        'items': data['items'],
        'order': data['order'],
        'cartItems': data['cartItems'],
        'total_price': sum(item['product']['price'] * item['quantity'] for item in data['items'])
    }
    return render(request, 'store/cart.html', context)


# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
def checkout(request):
    data = cartData(request)
    context = {
        'items': data['items'],
        'order': data['order'],
        'cartItems': data['cartItems'],
        'total_price': sum(item['product']['price'] * item['quantity'] for item in data['items'])
    }
    return render(request, 'store/checkout.html', context)


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Checkout Session
def create_checkout_session(request):
    if request.method != "POST":
        return HttpResponseBadRequest("Invalid request method. Please use POST.")

    try:
        data = json.loads(request.body)
        print("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend:", data)

        total_amount = int(float(data.get("total_amount", 0)) * 100)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå
        print(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {total_amount} ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PaymentIntent
        payment_intent = stripe.PaymentIntent.create(
            amount=total_amount,
            currency="thb",
            payment_method_types=["promptpay"],
            confirm=True
        )
        print("‚úÖ PaymentIntent ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", payment_intent)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ next_action
        if payment_intent.next_action and "promptpay_display_qr_code" in payment_intent.next_action:
            promptpay_qr_code = payment_intent.next_action["promptpay_display_qr_code"]["image_url"]
            print("‚úÖ QR Code URL:", promptpay_qr_code)
            return JsonResponse({"qr_code_url": promptpay_qr_code}, status=200)
        else:
            print("‚ùå Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á QR Code ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤")
            return JsonResponse({"error": "Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á QR Code ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"}, status=400)

    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", str(e))
        return JsonResponse({'error': str(e)}, status=400)


# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
def updateItem(request):
    data = json.loads(request.body)
    productId = data['productId']
    action = data['action']
    customer = request.user.customer
    product = Product.objects.get(id=productId)
    order, created = Order.objects.get_or_create(customer=customer, complete=False)

    orderItem, created = OrderItem.objects.get_or_create(order=order, product=product)
    if action == 'add':
        orderItem.quantity += 1
    elif action == 'remove':
        orderItem.quantity -= 1

    orderItem.save()
    if orderItem.quantity <= 0:
        orderItem.delete()

    return JsonResponse('Item was added/removed', safe=False)


# ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô Raspberry Pi
def processOrder(request):
    transaction_id = datetime.datetime.now().timestamp()
    data = json.loads(request.body)
    total = float(data['form']['total'])

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
    order, created = Order.objects.get_or_create(transaction_id=transaction_id)
    order.transaction_id = transaction_id
    order.save()

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if order.shipping:
        for item in order.orderitem_set.all():
            product = item.product
            motor_id = product.motor_id  # ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

            # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Raspberry Pi
            response = requests.post("http://raspberry_pi_ip_address/control_motor", json={"motor_id": motor_id})

            if response.status_code == 200:
                print(f"‚úÖ ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå {motor_id} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product.name}")
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product.name}")

    return JsonResponse('Payment submitted..', safe=False)


# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
def success(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({"message": "Payment successful"}, status=200)
    return render(request, 'store/success.html')


# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
def cancel(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({"message": "Payment cancelled"}, status=200)
    return render(request, 'store/cancel.html')


